user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Upstream definitions
    upstream grafana_backend {
        server grafana:3000;
        keepalive 32;
    }

    upstream kibana_backend {
        server kibana:5601;
        keepalive 32;
    }

    upstream sonarqube_backend {
        server sonarqube:9000;
        keepalive 32;
    }

    upstream prometheus_backend {
        server prometheus:9090;
        keepalive 32;
    }

    upstream lingualeap_frontend {
        server host.docker.internal:3000;
        keepalive 32;
    }

    upstream lingualeap_backend {
        server host.docker.internal:5000;
        keepalive 32;
    }

    # Default server block
    server {
        listen 80 default_server;
        server_name localhost;
        return 301 http://localhost/dashboard;
    }

    # Development dashboard
    server {
        listen 80;
        server_name localhost;
        location /dashboard {
            return 200 '
<!DOCTYPE html>
<html>
<head>
    <title>LinguaLeap Development Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .service { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .service h3 { margin: 0 0 10px 0; color: #333; }
        .service a { color: #007bff; text-decoration: none; margin-right: 15px; }
        .service a:hover { text-decoration: underline; }
        .category { margin: 30px 0; }
        .category h2 { color: #444; border-bottom: 2px solid #007bff; padding-bottom: 5px; }
    </style>
</head>
<body>
    <h1>üöÄ LinguaLeap Development Environment</h1>
    
    <div class="category">
        <h2>üìä Monitoring & Observability</h2>
        <div class="service">
            <h3>Grafana - System Dashboards</h3>
            <a href="http://localhost:3000" target="_blank">Open Grafana</a>
            <span>admin / grafana_admin_2024</span>
        </div>
        <div class="service">
            <h3>Prometheus - Metrics Collection</h3>
            <a href="http://localhost:9090" target="_blank">Open Prometheus</a>
        </div>
        <div class="service">
            <h3>Jaeger - Distributed Tracing</h3>
            <a href="http://localhost:16686" target="_blank">Open Jaeger</a>
        </div>
        <div class="service">
            <h3>Kibana - Log Analysis</h3>
            <a href="http://localhost:5601" target="_blank">Open Kibana</a>
        </div>
    </div>

    <div class="category">
        <h2>üõ†Ô∏è Development Tools</h2>
        <div class="service">
            <h3>GitLab CE - Source Control & CI/CD</h3>
            <a href="http://localhost:8090" target="_blank">Open GitLab</a>
            <span>root / (set on first login)</span>
        </div>
        <div class="service">
            <h3>SonarQube - Code Quality</h3>
            <a href="http://localhost:9000" target="_blank">Open SonarQube</a>
            <span>admin / admin</span>
        </div>
        <div class="service">
            <h3>Adminer - Database Management</h3>
            <a href="http://localhost:8080" target="_blank">Open Adminer</a>
            <span>lingualeap / dev_password_2024</span>
        </div>
        <div class="service">
            <h3>RedisInsight - Cache Management</h3>
            <a href="http://localhost:8001" target="_blank">Open RedisInsight</a>
        </div>
    </div>

    <div class="category">
        <h2>üèóÔ∏è Infrastructure</h2>
        <div class="service">
            <h3>Portainer - Container Management</h3>
            <a href="https://localhost:9443" target="_blank">Open Portainer</a>
        </div>
        <div class="service">
            <h3>MinIO - Object Storage</h3>
            <a href="http://localhost:9001" target="_blank">Open MinIO Console</a>
            <span>lingualeap / minio_password_2024</span>
        </div>
        <div class="service">
            <h3>Whisper API - Speech-to-Text</h3>
            <a href="http://localhost:9999" target="_blank">Whisper API Docs</a>
        </div>
    </div>

    <div class="category">
        <h2>üéØ Application Services</h2>
        <div class="service">
            <h3>LinguaLeap Frontend</h3>
            <a href="http://localhost:3000" target="_blank">Frontend App</a>
            <span>(Start with: npm run dev)</span>
        </div>
        <div class="service">
            <h3>LinguaLeap Backend API</h3>
            <a href="http://localhost:5000/api/health" target="_blank">API Health</a>
            <span>(Start with: npm run dev)</span>
        </div>
    </div>

    <p style="margin-top: 40px; color: #666;">
        All services are running in Docker containers. Check service status with: 
        <code>docker-compose -f docker-compose.development.yml ps</code>
    </p>
</body>
</html>
            ';
            add_header Content-Type text/html;
        }
    }

    # Grafana reverse proxy
    server {
        listen 80;
        server_name grafana.localhost;

        location / {
            proxy_pass http://grafana_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # SonarQube reverse proxy
    server {
        listen 80;
        server_name sonar.localhost;

        client_max_body_size 50M;

        location / {
            proxy_pass http://sonarqube_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Application reverse proxy (when running)
    server {
        listen 80;
        server_name app.localhost;

        # Frontend routes
        location / {
            proxy_pass http://lingualeap_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://lingualeap_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Auth endpoints with stricter rate limiting
        location /api/auth/ {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://lingualeap_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Health check endpoint
    server {
        listen 80;
        server_name health.localhost;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}