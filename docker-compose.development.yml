version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lingualeap-postgres
    environment:
      POSTGRES_DB: lingualeap_dev
      POSTGRES_USER: lingualeap
      POSTGRES_PASSWORD: dev_password_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lingualeap-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lingualeap -d lingualeap_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lingualeap-redis
    command: redis-server --appendonly yes --requirepass redis_dev_2024
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - lingualeap-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adminer - Database Management UI
  adminer:
    image: adminer:4.8.1
    container_name: lingualeap-adminer
    ports:
      - "8080:8080"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - postgres

  # RedisInsight - Redis Management UI
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: lingualeap-redis-insight
    ports:
      - "8001:8001"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - redis

  # GitLab CE - Git Repository & CI/CD
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: lingualeap-gitlab
    hostname: 'localhost'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8090'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        # Disable unused services to save resources
        prometheus_monitoring['enable'] = false
        alertmanager['enable'] = false
        grafana['enable'] = false
    ports:
      - '8090:8090'
      - '2222:22'
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    networks:
      - lingualeap-network
    restart: unless-stopped
    shm_size: '256m'

  # GitLab Runner - CI/CD Executor
  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: lingualeap-gitlab-runner
    volumes:
      - gitlab_runner_config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - gitlab

  # SonarQube - Code Quality Analysis
  sonarqube:
    image: sonarqube:10.3-community
    container_name: lingualeap-sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: lingualeap
      SONAR_JDBC_PASSWORD: dev_password_2024
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: lingualeap-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_2024
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: lingualeap
      GF_DATABASE_PASSWORD: dev_password_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - postgres
      - prometheus

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: lingualeap-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
    ports:
      - "9090:9090"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: lingualeap-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: lingualeap-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lingualeap-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lingualeap-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: lingualeap-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: lingualeap-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # MinIO - S3-Compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: lingualeap-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: lingualeap
      MINIO_ROOT_PASSWORD: minio_password_2024
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Portainer - Docker Management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: lingualeap-portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9443:9443"
    networks:
      - lingualeap-network
    restart: unless-stopped

  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: lingualeap-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - lingualeap-network
    restart: unless-stopped
    depends_on:
      - grafana
      - kibana
      - sonarqube

  # Whisper API - Self-hosted Speech-to-Text
  whisper-api:
    image: onerahmet/openai-whisper-asr-webservice:latest
    container_name: lingualeap-whisper
    environment:
      ASR_MODEL: base
      ASR_ENGINE: openai_whisper
    ports:
      - "9999:9000"
    networks:
      - lingualeap-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
  redis_data:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_runner_config:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  grafana_data:
  prometheus_data:
  elasticsearch_data:
  minio_data:
  portainer_data:

networks:
  lingualeap-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16