// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  name             String
  nativeLanguage   String?  @map("native_language")
  targetLanguage   String?  @map("target_language")
  currentLevel     String   @default("Beginner") @map("current_level")
  xpPoints         Int      @default(0) @map("xp_points")
  dailyStreak      Int      @default(0) @map("daily_streak")
  longestStreak    Int      @default(0) @map("longest_streak")
  lastActive       DateTime @default(now()) @map("last_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  speakingAttempts SpeakingAttempt[]
  conversationLogs ConversationLog[]
  learningSessions LearningSession[]
  userProgress     UserProgress[]

  @@map("users")
}

model Phrase {
  id                     String   @id @default(cuid())
  textNativeLanguage     String   @map("text_native_language") // Translation in user's native language
  textTargetLanguage     String   @map("text_target_language") // Text in target language
  phoneticTranscription  String?  @map("phonetic_transcription")
  topic                  String
  difficultyLevel        Int      @default(1) @map("difficulty_level")
  type                   String   @default("word") // "word" or "sentence"
  imageUrl               String?  @map("image_url")
  usageContext           String?  @map("usage_context")
  usageExample           String?  @map("usage_example") // Example usage sentence
  nativeLanguageCode     String   @map("native_language_code") // e.g., "hi", "en", "es"
  targetLanguageCode     String   @map("target_language_code") // e.g., "fr", "de", "ja"
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  speakingAttempts SpeakingAttempt[]

  @@map("phrases")
}

model SpeakingAttempt {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  phraseId           String   @map("phrase_id")
  userAudioUrl       String?  @map("user_audio_url")
  transcription      String?
  overallScore       Int?     @map("overall_score") // 1-100
  pronunciationScore Int?     @map("pronunciation_score") // 1-10
  clarityScore       Int?     @map("clarity_score") // 1-10
  fluencyScore       Int?     @map("fluency_score") // 1-10
  aiFeedback         String?  @map("ai_feedback")
  sessionId          String?  @map("session_id")
  attemptDate        DateTime @default(now()) @map("attempt_date")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)

  @@map("speaking_attempts")
}

model ConversationLog {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  sessionId         String   @map("session_id")
  turnNumber        Int      @map("turn_number")
  speaker           String   // "user" or "avatar"
  messageText       String   @map("message_text")
  audioUrl          String?  @map("audio_url")
  responseTime      Int?     @map("response_time") // in milliseconds
  conversationTopic String?  @map("conversation_topic")
  difficultyLevel   Int?     @map("difficulty_level")
  timestamp         DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversation_logs")
}

model LearningSession {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  sessionType         String   @map("session_type") // "vocabulary", "conversation", "practice"
  languagePracticed   String   @map("language_practiced")
  topicCovered        String?  @map("topic_covered")
  wordsLearned        Int      @default(0) @map("words_learned")
  timeSpent           Int      @default(0) @map("time_spent") // in minutes
  xpEarned            Int      @default(0) @map("xp_earned")
  accuracyPercentage  Float?   @map("accuracy_percentage")
  sessionDate         DateTime @default(now()) @map("session_date")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_sessions")
}

model UserProgress {
  id                        String   @id @default(cuid())
  userId                    String   @map("user_id")
  language                  String
  wordsMastered             Int      @default(0) @map("words_mastered")
  phrasesMastered           Int      @default(0) @map("phrases_mastered")
  totalPracticeTime         Int      @default(0) @map("total_practice_time") // in minutes
  averagePronunciationScore Float?   @map("average_pronunciation_score")
  currentStreak             Int      @default(0) @map("current_streak")
  levelAchieved             String   @default("Beginner") @map("level_achieved")
  lastUpdated               DateTime @default(now()) @map("last_updated")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, language])
  @@map("user_progress")
}