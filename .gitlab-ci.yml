stages:
  - setup
  - test
  - quality
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  POSTGRES_HOST: postgres
  POSTGRES_USER: lingualeap
  POSTGRES_PASSWORD: dev_password_2024
  POSTGRES_DB: lingualeap_dev
  REDIS_HOST: redis
  REDIS_PASSWORD: redis_dev_2024

# Setup stage
install_dependencies:
  stage: setup
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci
    - npm run bootstrap
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - backend/node_modules/
      - frontend/node_modules/
      - shared/node_modules/
  artifacts:
    paths:
      - node_modules/
      - backend/node_modules/
      - frontend/node_modules/
      - shared/node_modules/
    expire_in: 1 hour

# Test stage
test_backend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  services:
    - postgres:15-alpine
    - redis:7-alpine
  script:
    - cd backend
    - npm run test:coverage
    - npm run test:integration
  coverage: "/Lines\s*:\s*(\d+\.\d+)%/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml

test_frontend:
  stage: test
  image: node:${NODE_VERSION}-alpine
  script:
    - cd frontend
    - npm run test:coverage
  coverage: "/Lines\s*:\s*(\d+\.\d+)%/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml

# Quality stage
code_quality:
  stage: quality
  image: sonarqube/sonar-scanner-cli:latest
  script:
    - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}
  only:
    - main
    - develop

# Build stage
build_backend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - cd backend
    - npm run build
  artifacts:
    paths:
      - backend/dist/
    expire_in: 1 hour

build_frontend:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - cd frontend
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour

# Deploy stage
deploy_staging:
  stage: deploy
  script:
    - echo "Deploy to staging environment"
    - docker build -t lingualeap:staging .
    - docker-compose -f docker-compose.staging.yml up -d
  only:
    - develop
  when: manual

deploy_production:
  stage: deploy
  script:
    - echo "Deploy to production environment"
    - docker build -t lingualeap:latest .
    - docker-compose -f docker-compose.production.yml up -d
  only:
    - main
  when: manual
